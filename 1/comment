			动手构建一个编译器！
			Jack W. Crenshaw, Ph.D.
			翻译版阅读注释

			第一章：简介

这一章中讲述了整个教程中都在坚持的一些思想，并没有什么高深的内容。要自
己写一个编译器并不是困难的事情，希望读者能有信心。

下面是关于代码运行环境的注释：
原文写作于上世纪 90 年代，当时 Pascal 属于比较流行的语言之一。作者使用
Turbo Pascal 编写了原文中的代码。在今天 Turbo Pascal （特别是 4.0 版本
）恐怕已经绝迹了。我在翻译过程中同时也写了 Lua 版本的代码。我不会对这
个选择进行论述，Lua 是我常用的语言之一并且也小巧易读（巧合是 Lua 使用
then/do/end 而非花括号标识代码块的方法与 Pascal 有千丝万缕的联系），请
适应这个选择。

对于对 Lua 一无所知的人，我建议你通过编译或者你的包管理器得到一个解释
器（Lua 是解释型语言）。本节的代码抽取在 1.lua 中，你可以通过

lua 1.lua

直接运行。

要注意的是，不同子版本号的 Lua 差别不小。本文的 Lua 代码应当可以在
Lua 5.3 或者更新的解释器中正常运行

同样是历史原因，本系列编写的编译器目标架构是 m68k 处理器，我想没多少人
会有这么古老的机器了。翻译过程中我会调整来生成 x86-64 架构的汇编代码，
使用 AT&T 语法（和大学中教授的 Intel 语法不同），相关内容将会在下一节
提到。当然，你必须有 64 位的操作系统和处理器才能运行 64 位代码。

祝你的旅程顺利 :)
